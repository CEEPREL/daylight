{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/macbookpro/Documents/ceeprel/daylight/lib/db/actions.ts"],"sourcesContent":["'use server';\n\nimport { eq } from 'drizzle-orm';\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport { z } from 'zod';\nimport { db } from './drizzle';\nimport { emails, folders, threadFolders, threads, users } from './schema';\n\nconst sendEmailSchema = z.object({\n  subject: z.string().min(1, 'Subject is required'),\n  body: z.string().min(1, 'Body is required'),\n  recipientEmail: z.string().email('Invalid email address'),\n});\n\nexport async function sendEmailAction(_: any, formData: FormData) {\n  let newThread;\n  let rawFormData = {\n    subject: formData.get('subject'),\n    body: formData.get('body'),\n    recipientEmail: formData.get('recipientEmail'),\n  };\n\n  if (process.env.VERCEL_ENV === 'production') {\n    return {\n      error: 'Only works on localhost for now',\n      previous: rawFormData,\n    };\n  }\n\n  try {\n    let validatedFields = sendEmailSchema.parse({\n      subject: formData.get('subject'),\n      body: formData.get('body'),\n      recipientEmail: formData.get('recipientEmail'),\n    });\n\n    let { subject, body, recipientEmail } = validatedFields;\n\n    let [recipient] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, recipientEmail));\n\n    if (!recipient) {\n      [recipient] = await db\n        .insert(users)\n        .values({ email: recipientEmail })\n        .returning();\n    }\n\n    let result = await db\n      .insert(threads)\n      .values({\n        subject,\n        lastActivityDate: new Date(),\n      })\n      .returning();\n    newThread = result[0];\n\n    await db.insert(emails).values({\n      threadId: newThread.id,\n      senderId: 1,\n      recipientId: recipient.id,\n      subject,\n      body,\n      sentDate: new Date(),\n    });\n\n    let [sentFolder] = await db\n      .select()\n      .from(folders)\n      .where(eq(folders.name, 'Sent'));\n\n    await db.insert(threadFolders).values({\n      threadId: newThread.id,\n      folderId: sentFolder.id,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { error: error.errors[0].message, previous: rawFormData };\n    }\n    return {\n      error: 'Failed to send email. Please try again.',\n      previous: rawFormData,\n    };\n  }\n\n  revalidatePath('/', 'layout');\n  redirect(`/f/sent/${newThread.id}`);\n}\n\nexport async function moveThreadToDone(_: any, formData: FormData) {\n  if (process.env.VERCEL_ENV === 'production') {\n    return {\n      error: 'Only works on localhost for now',\n    };\n  }\n\n  let threadId = formData.get('threadId');\n\n  if (!threadId || typeof threadId !== 'string') {\n    return { error: 'Invalid thread ID', success: false };\n  }\n\n  try {\n    let doneFolder = await db.query.folders.findFirst({\n      where: eq(folders.name, 'Archive'),\n    });\n\n    if (!doneFolder) {\n      return { error: 'Done folder not found', success: false };\n    }\n\n    let parsedThreadId = parseInt(threadId, 10);\n\n    await db\n      .delete(threadFolders)\n      .where(eq(threadFolders.threadId, parsedThreadId));\n\n    await db.insert(threadFolders).values({\n      threadId: parsedThreadId,\n      folderId: doneFolder.id,\n    });\n\n    revalidatePath('/f/[name]');\n    revalidatePath('/f/[name]/[id]');\n    return { success: true, error: null };\n  } catch (error) {\n    console.error('Failed to move thread to Done:', error);\n    return { success: false, error: 'Failed to move thread to Done' };\n  }\n}\n\nexport async function moveThreadToTrash(_: any, formData: FormData) {\n  if (process.env.VERCEL_ENV === 'production') {\n    return {\n      error: 'Only works on localhost for now',\n    };\n  }\n\n  let threadId = formData.get('threadId');\n\n  if (!threadId || typeof threadId !== 'string') {\n    return { error: 'Invalid thread ID', success: false };\n  }\n\n  try {\n    let trashFolder = await db.query.folders.findFirst({\n      where: eq(folders.name, 'Trash'),\n    });\n\n    if (!trashFolder) {\n      return { error: 'Trash folder not found', success: false };\n    }\n\n    let parsedThreadId = parseInt(threadId, 10);\n\n    await db\n      .delete(threadFolders)\n      .where(eq(threadFolders.threadId, parsedThreadId));\n\n    await db.insert(threadFolders).values({\n      threadId: parsedThreadId,\n      folderId: trashFolder.id,\n    });\n\n    revalidatePath('/f/[name]');\n    revalidatePath('/f/[name]/[id]');\n    return { success: true, error: null };\n  } catch (error) {\n    console.error('Failed to move thread to Trash:', error);\n    return { success: false, error: 'Failed to move thread to Trash' };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///Users/macbookpro/Documents/ceeprel/daylight/app/components/thread-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ThreadHeader = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThreadHeader() from the server but ThreadHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/thread-list.tsx <module evaluation>\",\n    \"ThreadHeader\",\n);\nexport const ThreadList = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThreadList() from the server but ThreadList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/thread-list.tsx <module evaluation>\",\n    \"ThreadList\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,gEACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,gEACA","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/macbookpro/Documents/ceeprel/daylight/app/components/thread-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ThreadHeader = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThreadHeader() from the server but ThreadHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/thread-list.tsx\",\n    \"ThreadHeader\",\n);\nexport const ThreadList = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThreadList() from the server but ThreadList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/thread-list.tsx\",\n    \"ThreadList\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,4CACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,4CACA","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":["file:///Users/macbookpro/Documents/ceeprel/daylight/app/f/%5Bname%5D/page.tsx"],"sourcesContent":["import { ThreadHeader, ThreadList } from '@/app/components/thread-list';\nimport { getThreadsForFolder } from '@/lib/db/queries';\nimport { Suspense } from 'react';\n\nexport function generateStaticParams() {\n  const folderNames = [\n    'inbox',\n    'starred',\n    'drafts',\n    'sent',\n    'archive',\n    'trash',\n  ];\n\n  return folderNames.map((name) => ({ name }));\n}\n\nexport default function ThreadsPage({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ name: string }>;\n  searchParams: Promise<{ q?: string; id?: string }>;\n}) {\n  return (\n    <div className=\"flex h-screen\">\n      <Suspense fallback={<ThreadsSkeleton folderName=\"\" />}>\n        <Threads params={params} searchParams={searchParams} />\n      </Suspense>\n    </div>\n  );\n}\n\nfunction ThreadsSkeleton({ folderName }: { folderName: string }) {\n  return (\n    <div className=\"grow overflow-hidden border-r border-gray-200\">\n      <ThreadHeader folderName={folderName} />\n    </div>\n  );\n}\n\nasync function Threads({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ name: string }>;\n  searchParams: Promise<{ q?: string; id?: string }>;\n}) {\n  let { name } = await params;\n  let { q } = await searchParams;\n  let threads = await getThreadsForFolder(name);\n\n  return <ThreadList folderName={name} threads={threads} searchQuery={q} />;\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAEO,SAAS;IACd,MAAM,cAAc;QAClB;QACA;QACA;QACA;QACA;QACA;KACD;IAED,OAAO,YAAY,GAAG,CAAC,CAAC,OAAS,CAAC;YAAE;QAAK,CAAC;AAC5C;AAEe,SAAS,YAAY,EAClC,MAAM,EACN,YAAY,EAIb;IACC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,qMAAA,CAAA,WAAQ;YAAC,wBAAU,8OAAC;gBAAgB,YAAW;;;;;;sBAC9C,cAAA,8OAAC;gBAAQ,QAAQ;gBAAQ,cAAc;;;;;;;;;;;;;;;;AAI/C;AAEA,SAAS,gBAAgB,EAAE,UAAU,EAA0B;IAC7D,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,oIAAA,CAAA,eAAY;YAAC,YAAY;;;;;;;;;;;AAGhC;AAEA,eAAe,QAAQ,EACrB,MAAM,EACN,YAAY,EAIb;IACC,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM;IACrB,IAAI,EAAE,CAAC,EAAE,GAAG,MAAM;IAClB,IAAI,UAAU,MAAM,CAAA,GAAA,oHAAA,CAAA,sBAAmB,AAAD,EAAE;IAExC,qBAAO,8OAAC,oIAAA,CAAA,aAAU;QAAC,YAAY;QAAM,SAAS;QAAS,aAAa;;;;;;AACtE","debugId":null}}]
}